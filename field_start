import numpy as np


def calc_fib_coords(N, R=0.2):
      """A function to generate a sequence of fibre pivot positions that are equally spaced

      Returns:
          _type_: an array of XY values with a fibre number
      """
      assert type(N)==int, 'Number of positions must be an integer'
      
      R += 1
      coordinates = []
      ids = np.arange(N)
      for i in range(N):
        theta = 2 * np.pi * i / N
        x = R * np.cos(theta)
        y = R * np.sin(theta)
        ID = ids[i]
        coordinates.append((ID, x, y))
      
      
      return np.asarray(coordinates)
  
def generate_points(coords):
    """A function to generate a random point inside the allowed range of movement of a fibre

    Args:
        coords (array): An array with an X, Y structure
    """
    targets = []
    for index, item in enumerate(coords):
        
        rand_ang = np.radians(np.random.uniform(-14, 14))
        rand_rad = np.random.uniform(0, 1)
    
        X = item[0] + rand_rad * np.cos(rand_ang)
        Y = item[1] + rand_rad * np.sin(rand_ang)
        targets.append([X, Y])
    
    return np.asarray(targets)

def calc_time(W, v):
    """A vector to calculate the time taken for a move to complete for a given speed

    Args:
        W (vector): a vector of shape 2(N+1)

    Returns:
        T : The time in seconds
    """
    T = []
    for index, item in enumerate(W):
        d = np.sqrt( np.abs(item[0] - item[2])**2 + np.abs(item[1] - item[3])**2 )
        time = d / v
        T.append(time)
        
    return T


class field_gen():
      
      def __init__(self):
          
            start_coords = calc_fib_coords(15)
            
            self.fibre_positions_origin = start_coords[:, 1:]
            self.ids = self.fibre_positions_origin[:, 0].astype(int)
            self.fibre_end_positions = generate_points(self.fibre_positions_origin)
            
            self.full_coords_list = np.hstack([start_coords, self.fibre_end_positions])
            self.time = calc_time(self.full_coords_list[:, 1:], 1.5)
            return
        
if __name__ == '__main__':
    
    fg = field_gen()
    # print('Fibre start coords', fg.fibre_positions_origin)
    # print('\n')
    # print('fibre end coords', fg.fibre_end_positions)
    
    print(fg.time)

    
    